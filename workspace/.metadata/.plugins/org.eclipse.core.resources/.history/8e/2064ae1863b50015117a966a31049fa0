
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jan 07 18:16:25 CET 2016
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import java.io.*;
import org.apache.log4j.*;
import org.apache.log4j.xml.DOMConfigurator;
import rs.ac.bg.etf.pp1.util.Log4JUtils;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.ac.bg.etf.pp1.util.DumpSymbolTableVisitorModified;
import rs.etf.pp1.symboltable.structure.HashTableDataStructure;
import rs.etf.pp1.symboltable.structure.SymbolDataStructure;
import java.util.List;
import java.util.LinkedList;
import java.util.Collection;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jan 07 18:16:25 CET 2016
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\176\000\002\002\004\000\002\060\002\000\002\061" +
    "\002\000\002\063\002\000\002\064\002\000\002\002\014" +
    "\000\002\052\003\000\002\003\004\000\002\003\002\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\004\004\000\002\004\002\000\002\006\006\000\002\013" +
    "\005\000\002\013\003\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\055\003\000\002\055\003\000" +
    "\002\007\005\000\002\014\005\000\002\014\003\000\002" +
    "\015\003\000\002\015\005\000\002\065\002\000\002\066" +
    "\002\000\002\067\002\000\002\010\015\000\002\070\002" +
    "\000\002\071\002\000\002\072\002\000\002\073\002\000" +
    "\002\010\020\000\002\056\003\000\002\062\003\000\002" +
    "\016\004\000\002\016\002\000\002\017\005\000\002\017" +
    "\002\000\002\020\004\000\002\020\002\000\002\011\004" +
    "\000\002\074\002\000\002\011\005\000\002\075\002\000" +
    "\002\076\002\000\002\077\002\000\002\021\017\000\002" +
    "\053\003\000\002\023\003\000\002\023\002\000\002\024" +
    "\004\000\002\024\002\000\002\022\005\000\002\022\003" +
    "\000\002\026\004\000\002\026\006\000\002\057\003\000" +
    "\002\025\003\000\002\025\003\000\002\035\007\000\002" +
    "\035\011\000\002\035\007\000\002\036\003\000\002\036" +
    "\007\000\002\036\006\000\002\036\005\000\002\036\005" +
    "\000\002\036\011\000\002\036\007\000\002\036\004\000" +
    "\002\036\004\000\002\036\005\000\002\036\007\000\002" +
    "\036\007\000\002\036\011\000\002\036\005\000\002\027" +
    "\006\000\002\034\005\000\002\034\003\000\002\033\003" +
    "\000\002\032\005\000\002\032\003\000\002\040\003\000" +
    "\002\037\005\000\002\037\003\000\002\041\003\000\002" +
    "\041\005\000\002\030\004\000\002\030\003\000\002\031" +
    "\005\000\002\031\003\000\002\043\003\000\002\045\005" +
    "\000\002\045\003\000\002\047\003\000\002\047\005\000" +
    "\002\047\006\000\002\047\003\000\002\047\003\000\002" +
    "\047\004\000\002\047\007\000\002\047\005\000\002\100" +
    "\002\000\002\054\007\000\002\101\002\000\002\054\010" +
    "\000\002\054\003\000\002\050\004\000\002\050\002\000" +
    "\002\051\005\000\002\051\004\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\044\003\000\002\044\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\004\004\005\001\002\000\004\002\340\001" +
    "\002\000\004\005\007\001\002\000\012\005\000\006\000" +
    "\010\000\022\000\001\002\000\012\005\ufffb\006\ufffb\010" +
    "\ufffb\022\ufffb\001\002\000\012\005\ufff9\006\ufff9\010\ufff9" +
    "\022\ufff9\001\002\000\012\005\015\006\014\010\022\022" +
    "\021\001\002\000\012\005\ufffa\006\ufffa\010\ufffa\022\ufffa" +
    "\001\002\000\004\005\331\001\002\000\010\005\ufffe\007" +
    "\ufffe\024\ufffe\001\002\000\050\005\uffc5\011\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\026\uffc5\040\uffc5\041\uffc5\042\uffc5\045" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5" +
    "\054\uffc5\055\uffc5\056\uffc5\001\002\000\012\005\ufff7\006" +
    "\ufff7\010\ufff7\022\ufff7\001\002\000\012\005\ufff6\006\ufff6" +
    "\010\ufff6\022\ufff6\001\002\000\012\005\ufff8\006\ufff8\010" +
    "\ufff8\022\ufff8\001\002\000\004\005\041\001\002\000\004" +
    "\005\015\001\002\000\004\005\024\001\002\000\004\012" +
    "\032\001\002\000\006\011\ufff1\017\ufff1\001\002\000\006" +
    "\011\030\017\027\001\002\000\004\005\024\001\002\000" +
    "\012\005\ufff3\006\ufff3\010\ufff3\022\ufff3\001\002\000\006" +
    "\011\ufff2\017\ufff2\001\002\000\012\013\034\014\037\015" +
    "\036\016\033\001\002\000\006\011\uffee\017\uffee\001\002" +
    "\000\044\011\uffed\017\uffed\021\uffed\026\uffed\040\uffed\041" +
    "\uffed\042\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed" +
    "\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\001\002\000" +
    "\006\011\ufff0\017\ufff0\001\002\000\006\011\uffef\017\uffef" +
    "\001\002\000\044\011\uffec\017\uffec\021\uffec\026\uffec\040" +
    "\uffec\041\uffec\042\uffec\045\uffec\046\uffec\047\uffec\050\uffec" +
    "\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\001" +
    "\002\000\006\006\000\023\042\001\002\000\006\006\uffdd" +
    "\023\uffdd\001\002\000\004\005\306\001\002\000\004\006" +
    "\044\001\002\000\010\005\uffe6\006\uffe6\007\uffe6\001\002" +
    "\000\010\005\uffda\006\uffda\007\uffda\001\002\000\010\005" +
    "\015\006\uffe5\007\uffe5\001\002\000\006\006\052\007\uffd8" +
    "\001\002\000\010\005\uffdb\006\uffdb\007\uffdb\001\002\000" +
    "\004\007\303\001\002\000\010\005\uffd6\007\uffd6\024\uffd6" +
    "\001\002\000\010\005\015\007\055\024\057\001\002\000" +
    "\004\005\062\001\002\000\004\007\uffd9\001\002\000\010" +
    "\005\uffd7\007\uffd7\024\uffd7\001\002\000\004\005\uffd4\001" +
    "\002\000\004\005\062\001\002\000\010\005\uffd3\007\uffd3" +
    "\024\uffd3\001\002\000\004\025\uffce\001\002\000\004\025" +
    "\000\001\002\000\004\025\uffd2\001\002\000\004\025\066" +
    "\001\002\000\006\005\015\026\uffcc\001\002\000\004\005" +
    "\277\001\002\000\006\017\275\026\uffcd\001\002\000\006" +
    "\017\uffc8\026\uffc8\001\002\000\004\026\uffd1\001\002\000" +
    "\004\026\074\001\002\000\006\005\uffda\006\uffda\001\002" +
    "\000\006\005\015\006\076\001\002\000\024\005\uffca\006" +
    "\uffca\007\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca" +
    "\037\uffca\001\002\000\024\005\104\006\102\007\114\031" +
    "\107\032\103\033\115\034\113\035\100\037\112\001\002" +
    "\000\004\025\271\001\002\000\026\005\uffbf\006\uffbf\007" +
    "\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\001\002\000\024\005\uffca\006\uffca\007\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\037\uffca\001\002" +
    "\000\004\025\262\001\002\000\060\011\uff93\012\uff93\017" +
    "\uff93\020\243\021\uff93\025\uff93\026\uff93\027\uff93\030\uff93" +
    "\040\uff93\041\uff93\042\uff93\044\244\045\uff93\046\uff93\047" +
    "\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93" +
    "\056\uff93\001\002\000\012\012\226\025\231\027\227\030" +
    "\230\001\002\000\024\005\uffc3\006\uffc3\007\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\035\uffc3\037\uffc3\001\002\000" +
    "\004\025\175\001\002\000\024\005\uffcb\006\uffcb\007\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\037\uffcb\001" +
    "\002\000\024\005\uffc4\006\uffc4\007\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\037\uffc4\001\002\000\004\025" +
    "\165\001\002\000\022\005\104\011\126\013\034\014\037" +
    "\016\132\025\133\042\121\043\123\001\002\000\010\005" +
    "\uffd0\007\uffd0\024\uffd0\001\002\000\004\011\116\001\002" +
    "\000\026\005\uffb8\006\uffb8\007\uffb8\031\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\001\002\000\010" +
    "\005\uffff\007\uffff\024\uffff\001\002\000\010\005\uffcf\007" +
    "\uffcf\024\uffcf\001\002\000\016\005\104\013\034\014\037" +
    "\016\132\025\133\043\123\001\002\000\004\011\163\001" +
    "\002\000\004\005\015\001\002\000\046\011\uff9f\017\uff9f" +
    "\021\uff9f\025\150\026\uff9f\040\uff9f\041\uff9f\042\uff9f\045" +
    "\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f" +
    "\054\uff9f\055\uff9f\056\uff9f\001\002\000\044\011\uff9c\017" +
    "\uff9c\021\uff9c\026\uff9c\040\uff9c\041\uff9c\042\uff9c\045\uff9c" +
    "\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054" +
    "\uff9c\055\uff9c\056\uff9c\001\002\000\026\005\uffb7\006\uffb7" +
    "\007\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\001\002\000\036\011\uffa3\017\uffa3\021\uffa3" +
    "\026\uffa3\040\uffa3\041\uffa3\042\uffa3\045\uffa3\046\uffa3\047" +
    "\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\001\002\000\044" +
    "\011\uffa0\017\uffa0\021\uffa0\026\uffa0\040\uffa0\041\uffa0\042" +
    "\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0" +
    "\053\uffa0\054\uffa0\055\uffa0\056\uffa0\001\002\000\036\011" +
    "\uffa5\017\uffa5\021\uffa5\026\uffa5\040\uffa5\041\uffa5\042\145" +
    "\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053" +
    "\144\001\002\000\044\011\uff9b\017\uff9b\021\uff9b\026\uff9b" +
    "\040\uff9b\041\uff9b\042\uff9b\045\uff9b\046\uff9b\047\uff9b\050" +
    "\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b" +
    "\001\002\000\020\005\104\013\034\014\037\016\132\025" +
    "\133\042\121\043\123\001\002\000\044\011\uffa2\017\uffa2" +
    "\021\uffa2\026\uffa2\040\uffa2\041\uffa2\042\uffa2\045\uffa2\046" +
    "\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\140" +
    "\055\136\056\135\001\002\000\016\005\uff84\013\uff84\014" +
    "\uff84\016\uff84\025\uff84\043\uff84\001\002\000\016\005\uff85" +
    "\013\uff85\014\uff85\016\uff85\025\uff85\043\uff85\001\002\000" +
    "\016\005\104\013\034\014\037\016\132\025\133\043\123" +
    "\001\002\000\016\005\uff86\013\uff86\014\uff86\016\uff86\025" +
    "\uff86\043\uff86\001\002\000\044\011\uffa1\017\uffa1\021\uffa1" +
    "\026\uffa1\040\uffa1\041\uffa1\042\uffa1\045\uffa1\046\uffa1\047" +
    "\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1" +
    "\056\uffa1\001\002\000\004\026\143\001\002\000\044\011" +
    "\uff98\017\uff98\021\uff98\026\uff98\040\uff98\041\uff98\042\uff98" +
    "\045\uff98\046\uff98\047\uff98\050\uff98\051\uff98\052\uff98\053" +
    "\uff98\054\uff98\055\uff98\056\uff98\001\002\000\016\005\uff88" +
    "\013\uff88\014\uff88\016\uff88\025\uff88\043\uff88\001\002\000" +
    "\016\005\uff87\013\uff87\014\uff87\016\uff87\025\uff87\043\uff87" +
    "\001\002\000\016\005\104\013\034\014\037\016\132\025" +
    "\133\043\123\001\002\000\036\011\uffa4\017\uffa4\021\uffa4" +
    "\026\uffa4\040\uffa4\041\uffa4\042\uffa4\045\uffa4\046\uffa4\047" +
    "\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\001\002\000\022" +
    "\005\104\013\034\014\037\016\132\025\133\026\153\042" +
    "\121\043\123\001\002\000\004\026\156\001\002\000\006" +
    "\017\154\026\uffaf\001\002\000\044\011\uff9e\017\uff9e\021" +
    "\uff9e\026\uff9e\040\uff9e\041\uff9e\042\uff9e\045\uff9e\046\uff9e" +
    "\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055" +
    "\uff9e\056\uff9e\001\002\000\020\005\104\013\034\014\037" +
    "\016\132\025\133\042\121\043\123\001\002\000\004\026" +
    "\uffb0\001\002\000\044\011\uff9d\017\uff9d\021\uff9d\026\uff9d" +
    "\040\uff9d\041\uff9d\042\uff9d\045\uff9d\046\uff9d\047\uff9d\050" +
    "\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d" +
    "\001\002\000\046\011\uff9a\017\uff9a\020\160\021\uff9a\026" +
    "\uff9a\040\uff9a\041\uff9a\042\uff9a\045\uff9a\046\uff9a\047\uff9a" +
    "\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056" +
    "\uff9a\001\002\000\020\005\104\013\034\014\037\016\132" +
    "\025\133\042\121\043\123\001\002\000\004\021\162\001" +
    "\002\000\044\011\uff99\017\uff99\021\uff99\026\uff99\040\uff99" +
    "\041\uff99\042\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051" +
    "\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99\001\002" +
    "\000\026\005\uffb6\006\uffb6\007\uffb6\031\uffb6\032\uffb6\033" +
    "\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\001\002\000\036" +
    "\011\uffa6\017\uffa6\021\uffa6\026\uffa6\040\uffa6\041\uffa6\042" +
    "\145\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6" +
    "\053\144\001\002\000\020\005\104\013\034\014\037\016" +
    "\132\025\133\042\121\043\123\001\002\000\006\017\167" +
    "\026\170\001\002\000\004\013\172\001\002\000\004\011" +
    "\171\001\002\000\026\005\uffb4\006\uffb4\007\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\001" +
    "\002\000\004\026\173\001\002\000\004\011\174\001\002" +
    "\000\026\005\uffb3\006\uffb3\007\uffb3\031\uffb3\032\uffb3\033" +
    "\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\001\002\000\020" +
    "\005\104\013\034\014\037\016\132\025\133\042\121\043" +
    "\123\001\002\000\010\026\uffa9\040\uffa9\041\uffa9\001\002" +
    "\000\024\026\uffa8\040\uffa8\041\uffa8\045\222\046\216\047" +
    "\220\050\221\051\223\052\217\001\002\000\004\026\210" +
    "\001\002\000\006\026\uffac\040\uffac\001\002\000\010\026" +
    "\uffab\040\uffab\041\206\001\002\000\006\026\uffae\040\204" +
    "\001\002\000\020\005\104\013\034\014\037\016\132\025" +
    "\133\042\121\043\123\001\002\000\006\026\uffad\040\uffad" +
    "\001\002\000\020\005\104\013\034\014\037\016\132\025" +
    "\133\042\121\043\123\001\002\000\010\026\uffaa\040\uffaa" +
    "\041\uffaa\001\002\000\022\005\104\006\102\031\107\032" +
    "\103\033\115\034\113\035\100\037\112\001\002\000\026" +
    "\005\uffc3\006\uffc3\007\uffc3\031\uffc3\032\uffc3\033\uffc3\034" +
    "\uffc3\035\uffc3\036\213\037\uffc3\001\002\000\024\005\uffc2" +
    "\006\uffc2\007\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\037\uffc2\001\002\000\022\005\104\006\102\031\107" +
    "\032\103\033\115\034\113\035\100\037\112\001\002\000" +
    "\026\005\uffba\006\uffba\007\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\037\uffba\001\002\000\024\005" +
    "\uffc1\006\uffc1\007\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1" +
    "\035\uffc1\037\uffc1\001\002\000\020\005\uff8d\013\uff8d\014" +
    "\uff8d\016\uff8d\025\uff8d\042\uff8d\043\uff8d\001\002\000\020" +
    "\005\uff89\013\uff89\014\uff89\016\uff89\025\uff89\042\uff89\043" +
    "\uff89\001\002\000\020\005\uff8c\013\uff8c\014\uff8c\016\uff8c" +
    "\025\uff8c\042\uff8c\043\uff8c\001\002\000\020\005\uff8b\013" +
    "\uff8b\014\uff8b\016\uff8b\025\uff8b\042\uff8b\043\uff8b\001\002" +
    "\000\020\005\uff8e\013\uff8e\014\uff8e\016\uff8e\025\uff8e\042" +
    "\uff8e\043\uff8e\001\002\000\020\005\uff8a\013\uff8a\014\uff8a" +
    "\016\uff8a\025\uff8a\042\uff8a\043\uff8a\001\002\000\020\005" +
    "\104\013\034\014\037\016\132\025\133\042\121\043\123" +
    "\001\002\000\010\026\uffa7\040\uffa7\041\uffa7\001\002\000" +
    "\020\005\104\013\034\014\037\016\132\025\133\042\121" +
    "\043\123\001\002\000\004\011\240\001\002\000\004\011" +
    "\237\001\002\000\022\005\104\013\034\014\037\016\132" +
    "\025\133\026\233\042\121\043\123\001\002\000\004\026" +
    "\235\001\002\000\004\011\234\001\002\000\026\005\uffbd" +
    "\006\uffbd\007\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\001\002\000\004\011\236\001\002" +
    "\000\026\005\uffbe\006\uffbe\007\uffbe\031\uffbe\032\uffbe\033" +
    "\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\001\002\000\026" +
    "\005\uffbb\006\uffbb\007\uffbb\031\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\001\002\000\026\005\uffbc" +
    "\006\uffbc\007\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\037\uffbc\001\002\000\004\011\242\001\002" +
    "\000\026\005\uffb1\006\uffb1\007\uffb1\031\uffb1\032\uffb1\033" +
    "\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\001\002\000\020" +
    "\005\104\013\034\014\037\016\132\025\133\042\121\043" +
    "\123\001\002\000\004\005\245\001\002\000\060\011\uff97" +
    "\012\uff97\017\uff97\020\uff97\021\uff97\025\uff97\026\uff97\027" +
    "\uff97\030\uff97\040\uff97\041\uff97\042\uff97\044\uff97\045\uff97" +
    "\046\uff97\047\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054" +
    "\uff97\055\uff97\056\uff97\001\002\000\060\011\uff91\012\uff91" +
    "\017\uff91\020\uff91\021\uff91\025\uff91\026\uff91\027\uff91\030" +
    "\uff91\040\uff91\041\uff91\042\uff91\044\uff91\045\uff91\046\uff91" +
    "\047\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055" +
    "\uff91\056\uff91\001\002\000\060\011\uff96\012\uff96\017\uff96" +
    "\020\251\021\uff96\025\uff96\026\uff96\027\uff96\030\uff96\040" +
    "\uff96\041\uff96\042\uff96\044\252\045\uff96\046\uff96\047\uff96" +
    "\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96\056" +
    "\uff96\001\002\000\060\011\uff92\012\uff92\017\uff92\020\uff92" +
    "\021\uff92\025\uff92\026\uff92\027\uff92\030\uff92\040\uff92\041" +
    "\uff92\042\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92" +
    "\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92\056\uff92\001" +
    "\002\000\020\005\104\013\034\014\037\016\132\025\133" +
    "\042\121\043\123\001\002\000\004\005\253\001\002\000" +
    "\060\011\uff8f\012\uff8f\017\uff8f\020\uff8f\021\uff8f\025\uff8f" +
    "\026\uff8f\027\uff8f\030\uff8f\040\uff8f\041\uff8f\042\uff8f\044" +
    "\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f" +
    "\053\uff8f\054\uff8f\055\uff8f\056\uff8f\001\002\000\004\021" +
    "\255\001\002\000\060\011\uff90\012\uff90\017\uff90\020\uff90" +
    "\021\uff90\025\uff90\026\uff90\027\uff90\030\uff90\040\uff90\041" +
    "\uff90\042\uff90\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90" +
    "\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056\uff90\001" +
    "\002\000\004\021\257\001\002\000\060\011\uff95\012\uff95" +
    "\017\uff95\020\uff95\021\uff95\025\uff95\026\uff95\027\uff95\030" +
    "\uff95\040\uff95\041\uff95\042\uff95\044\uff95\045\uff95\046\uff95" +
    "\047\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055" +
    "\uff95\056\uff95\001\002\000\060\011\uff91\012\uff91\017\uff91" +
    "\020\uff91\021\uff91\025\uff91\026\uff91\027\uff91\030\uff91\040" +
    "\uff91\041\uff91\042\uff91\044\uff91\045\uff91\046\uff91\047\uff91" +
    "\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055\uff91\056" +
    "\uff91\001\002\000\060\011\uff94\012\uff94\017\uff94\020\251" +
    "\021\uff94\025\uff94\026\uff94\027\uff94\030\uff94\040\uff94\041" +
    "\uff94\042\uff94\044\252\045\uff94\046\uff94\047\uff94\050\uff94" +
    "\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94\001" +
    "\002\000\020\005\104\013\034\014\037\016\132\025\133" +
    "\042\121\043\123\001\002\000\004\026\264\001\002\000" +
    "\022\005\104\006\102\031\107\032\103\033\115\034\113" +
    "\035\100\037\112\001\002\000\026\005\uffb9\006\uffb9\007" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9" +
    "\037\uffb9\001\002\000\024\005\uffc0\006\uffc0\007\uffc0\031" +
    "\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\037\uffc0\001\002" +
    "\000\024\005\104\006\102\007\270\031\107\032\103\033" +
    "\115\034\113\035\100\037\112\001\002\000\026\005\uffb2" +
    "\006\uffb2\007\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035" +
    "\uffb2\036\uffb2\037\uffb2\001\002\000\004\005\104\001\002" +
    "\000\004\026\273\001\002\000\004\011\274\001\002\000" +
    "\026\005\uffb5\006\uffb5\007\uffb5\031\uffb5\032\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\037\uffb5\001\002\000\004\005" +
    "\015\001\002\000\006\017\uffc9\026\uffc9\001\002\000\010" +
    "\017\uffc7\020\300\026\uffc7\001\002\000\004\021\301\001" +
    "\002\000\006\017\uffc6\026\uffc6\001\002\000\010\005\uffd5" +
    "\007\uffd5\024\uffd5\001\002\000\012\005\uffe4\006\uffe4\010" +
    "\uffe4\022\uffe4\001\002\000\012\005\uffff\006\uffff\010\uffff" +
    "\022\uffff\001\002\000\012\005\uffe3\006\uffe3\010\uffe3\022" +
    "\uffe3\001\002\000\004\006\uffdc\001\002\000\004\006\000" +
    "\001\002\000\004\006\uffe2\001\002\000\004\006\312\001" +
    "\002\000\010\005\uffe1\006\uffe1\007\uffe1\001\002\000\010" +
    "\005\uffda\006\uffda\007\uffda\001\002\000\010\005\015\006" +
    "\uffe0\007\uffe0\001\002\000\006\006\052\007\uffd8\001\002" +
    "\000\004\007\317\001\002\000\012\005\uffdf\006\uffdf\010" +
    "\uffdf\022\uffdf\001\002\000\012\005\uffff\006\uffff\010\uffff" +
    "\022\uffff\001\002\000\012\005\uffde\006\uffde\010\uffde\022" +
    "\uffde\001\002\000\010\005\ufff4\007\ufff4\024\ufff4\001\002" +
    "\000\010\005\015\007\324\024\057\001\002\000\004\002" +
    "\ufffd\001\002\000\010\005\ufff5\007\ufff5\024\ufff5\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\ufffc\001\002\000" +
    "\006\011\336\017\335\001\002\000\010\011\uffe8\017\uffe8" +
    "\020\333\001\002\000\006\011\uffe9\017\uffe9\001\002\000" +
    "\004\021\334\001\002\000\006\011\uffe7\017\uffe7\001\002" +
    "\000\004\005\331\001\002\000\014\005\uffeb\006\uffeb\007" +
    "\uffeb\010\uffeb\022\uffeb\001\002\000\006\011\uffea\017\uffea" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\052\005\001\001\000\004\060\007\001\001\000\002" +
    "\001\001\000\004\003\010\001\001\000\014\005\011\006" +
    "\017\007\015\010\016\057\012\001\001\000\002\001\001" +
    "\000\006\014\327\015\331\001\001\000\004\063\321\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\037\001\001\000\004\057" +
    "\022\001\001\000\006\012\024\013\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\042\001\001\000\002\001\001\000\004\062\306\001" +
    "\001\000\002\001\001\000\004\065\044\001\001\000\004" +
    "\016\045\001\001\000\010\007\047\057\012\066\046\001" +
    "\001\000\004\017\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\052\001\001\000\006\011\055\057" +
    "\053\001\001\000\006\021\301\053\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\074\057\001\001\000" +
    "\006\021\060\053\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\063\001\001\000\004\075\064\001" +
    "\001\000\002\001\001\000\012\022\067\023\071\026\070" +
    "\057\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\076\072\001\001\000\002\001\001" +
    "\000\004\016\074\001\001\000\006\007\047\057\012\001" +
    "\001\000\004\024\076\001\001\000\014\025\107\027\100" +
    "\035\110\036\105\054\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\266\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\030\121\031\130\043\126\045\133\047" +
    "\127\054\123\055\124\001\001\000\004\077\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\117\001" +
    "\001\000\002\001\001\000\016\031\163\043\126\045\133" +
    "\047\127\054\123\055\124\001\001\000\002\001\001\000" +
    "\004\057\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\145\001\001\000\002\001\001\000\020\030\141" +
    "\031\130\043\126\045\133\047\127\054\123\055\124\001" +
    "\001\000\004\046\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\047\140\054\123\055\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\043" +
    "\146\045\133\047\127\054\123\055\124\001\001\000\002" +
    "\001\001\000\022\030\151\031\130\034\150\043\126\045" +
    "\133\047\127\054\123\055\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\030\151\031" +
    "\130\034\154\043\126\045\133\047\127\054\123\055\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\030\160\031\130\043\126\045\133\047\127" +
    "\054\123\055\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\145\001\001\000\020" +
    "\030\165\031\130\043\126\045\133\047\127\054\123\055" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\030\176\031\130\032\202" +
    "\033\177\037\201\040\200\041\175\043\126\045\133\047" +
    "\127\054\123\055\124\001\001\000\002\001\001\000\004" +
    "\042\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\030\176\031\130" +
    "\037\201\040\204\041\175\043\126\045\133\047\127\054" +
    "\123\055\124\001\001\000\002\001\001\000\022\030\176" +
    "\031\130\041\206\043\126\045\133\047\127\054\123\055" +
    "\124\001\001\000\002\001\001\000\014\025\211\027\100" +
    "\035\110\036\210\054\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\027\100\035\214\036\213\054\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\030\224\031" +
    "\130\043\126\045\133\047\127\054\123\055\124\001\001" +
    "\000\002\001\001\000\020\030\240\031\130\043\126\045" +
    "\133\047\127\054\123\055\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\030\151\031\130\034\231\043" +
    "\126\045\133\047\127\054\123\055\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\030\255\031" +
    "\130\043\126\045\133\047\127\054\123\055\124\001\001" +
    "\000\002\001\001\000\004\100\245\001\001\000\004\050" +
    "\246\001\001\000\004\051\247\001\001\000\002\001\001" +
    "\000\020\030\253\031\130\043\126\045\133\047\127\054" +
    "\123\055\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\257\001\001\000\004\050\260\001\001\000\004" +
    "\051\247\001\001\000\032\030\176\031\130\032\202\033" +
    "\262\037\201\040\200\041\175\043\126\045\133\047\127" +
    "\054\123\055\124\001\001\000\002\001\001\000\012\027" +
    "\100\035\265\036\264\054\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\025\107\027\100\035\110\036" +
    "\105\054\104\001\001\000\002\001\001\000\004\054\271" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\275\057\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\067\303\001\001\000\004\061\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\307\001\001\000\004\070\310\001\001\000\002\001\001" +
    "\000\004\071\312\001\001\000\004\016\313\001\001\000" +
    "\010\007\047\057\012\072\314\001\001\000\004\017\315" +
    "\001\001\000\002\001\001\000\004\073\317\001\001\000" +
    "\004\061\320\001\001\000\002\001\001\000\004\004\322" +
    "\001\001\000\006\011\324\057\053\001\001\000\004\064" +
    "\325\001\001\000\002\001\001\000\004\061\326\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\336\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
	
	Tab.init();					// Universe scope	

	Tab.currentScope.addToLocals(new Obj(Obj.Type, "bool", CUP$MJParser$actions.boolType));
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "string", CUP$MJParser$actions.stringType));
	
	stringKonstante = new LinkedList<String>();
	
	errorFound = false;
	mainMethod = false;
	isGlobal = true;
	inner = false;
	local = false;
	mismatched = false;
	wrongReturnTypeOverride = false;
	
	var_count = 0;
	main_var_count = 0;
	const_count = 0;
   	array_count = 0;
   	function_cnt = 0;
   	statement_cnt = 0;
   	main_method_calls = 0;
   	formal_param_cnt = 0;
   	inner_class_cnt = 0;
   	inner_class_meth_cnt = 0;
   	inner_class_field_cnt = 0;

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		System.out.println(s.toString() + " " + s.value.toString());
	return s;

    }


	
	static {
		DOMConfigurator.configure(Log4JUtils.instance().findLoggerConfigFile());
		Log4JUtils.instance().prepareLogFile(Logger.getRootLogger());
	}
	
	public List<String> stringKonstante;

	public boolean errorFound = false;
	public boolean isGlobal = true;				// globalne prom
	public boolean mainMethod = false;			// da li je main metoda glavne klase
	public boolean inner = false;				// unutrasnje klase
	public boolean local = false;				// koristim za polja unutrasnjih klasa
	public boolean mismatched = false;			// override
	public boolean wrongReturnTypeOverride = false;
	
	// BROJACI ZA NIVO A
   	public int var_count = 0;
	public int main_var_count = 0;
	public int const_count = 0;
   	public int array_count = 0;
   	
   	// BROJACI ZA NIVO B	
   	public int function_cnt = 0;
   	public int statement_cnt = 0;
   	public int main_method_calls = 0;
   	public int formal_param_cnt = 0;
   	
   	// BROJACI ZA NIVO C
	public int inner_class_cnt = 0;
	public int inner_class_meth_cnt = 0;
	public int inner_class_field_cnt = 0;
   	
	public static void main(String[] args) throws Exception {
		Logger log = Logger.getLogger(MJParser.class);	
		Reader br = null;
		
		try {
			if (args.length < 1) {
				log.error("Not enough arguments supplied! Usage: MJParser <source-file>");
				return;
			}
			
			File sourceCode = new File(args[0]);
			if (!sourceCode.exists()) {
				log.error("Source file [" + sourceCode.getAbsolutePath() + "] not found!");
				return;
			}
				
			log.info("Compiling source file: " + sourceCode.getAbsolutePath());
			
			br = new BufferedReader(new FileReader(sourceCode));
			Yylex lexer = new Yylex(br);
			
			MJParser p = new MJParser(lexer);
	        Symbol s = p.parse();  //pocetak parsiranja
	        
	        /*
	         * ISPIS SADRZAJA TABELE SIMBOLA
	         */
	        DumpSymbolTableVisitorModified ds = new DumpSymbolTableVisitorModified();
	        Tab.dump(ds);
	        
	        if (p.errorFound) {
	        	log.error("Parsiranje nije uspesno zavrseno!");
	        }
	        else {
	        	System.out.println("=====================SINTAKSNA ANALIZA=========================");
	        	System.out.println(p.var_count + "\tglobalne promenljive" );
			   	System.out.println(p.main_var_count + "\tlokalne promenljive (u main funkciji)");
			   	System.out.println(p.const_count + "\tglobalne konstante");
			   	System.out.println(p.array_count + "\tglobalni nizovi");
			   	
				System.out.println(p.function_cnt + "\tfunkcije u glavnom programu");
				System.out.println(p.statement_cnt + "\tblokovi naredbi");
				System.out.println(p.main_method_calls + "\tpozivi funkcija u telu metode main");
				System.out.println(p.formal_param_cnt + "\tformalni argumenti funkcija");
			   	
				System.out.println(p.inner_class_cnt + "\tunutrasnje klase");
				System.out.println(p.inner_class_meth_cnt + "\tmetode unutrasnjih klasa");
				System.out.println(p.inner_class_field_cnt + "\tpolja unutrasnjih klasa");
	        	System.out.println("\nParsiranje je uspesno zavrseno!");
	        }
	        
		} 
		finally {
			if (br != null) try { br.close(); } catch (IOException e1) { log.error(e1.getMessage(), e1); }
		}
	}
	
	Logger log = Logger.getLogger(getClass());
	
	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
	
	// ovde se moze izvrsiti oporavak
	public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
	
	// ovde se ne moze izvrsiti oporavak
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }
	
	public void report_error(String message, Object info){
		errorFound = true;
		StringBuilder msg = new StringBuilder(message);
		if (info instanceof Symbol)
	      	msg.append(" na liniji ").append(((Symbol)info).left);
	    log.error(message);
    }
	
	public void report_info(String message, Object info){
		StringBuilder msg = new StringBuilder(message);
		if (info instanceof Symbol)
	      	msg.append(" na liniji ").append(((Symbol)info).left);
		System.out.println(message);
    }
	
	public String writeObj(Obj obj)
	{
		String message = "";
		if (obj != null)
		{
			DumpSymbolTableVisitorModified ds = new DumpSymbolTableVisitorModified();
			obj.accept(ds);
			message = ds.getOutput();
		}
		return message;
	}
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {

  
	Logger log = Logger.getLogger(getClass());

	public static final Struct boolType = new Struct(Struct.Bool);
	//public static final Struct stringType = new Struct(Struct.Array, Tab.charType);
	public static final Struct stringType = new Struct(6);
	
	Obj currentMethod = null, currentClass = null, currentDesignator = null, baseClass = null, overridenMethod = null;
	Struct currentType = Tab.noType;
	int lastClass = 0;
	boolean isVoid = false, returnExists=false;	// za kontekstni uslov (return)
	

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Mulop ::= MOD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Mulop ::= DIV 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Mulop ::= TIMES 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Addop ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Addop ::= PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Relop ::= LESS_OR_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Relop ::= LESS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Relop ::= GREATER_OR_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Relop ::= GREATER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Relop ::= NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Relop ::= EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DesignatorPart ::= DOT IDENT 
            {
              Object RESULT =null;
		int namePartleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int namePartright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object namePart = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					   Obj tempSubObj = Tab.noObj; 
					   if (currentDesignator.getType().getKind() == Struct.Array)
						   tempSubObj = currentDesignator.getType().getElemType().getMembersTable().searchKey(namePart.toString());
					   else
						   tempSubObj = currentDesignator.getType().getMembersTable().searchKey(namePart.toString());
					   if(tempSubObj == null)
						   parser.report_error("Greska na liniji " + namePartleft + ": ime" + namePart.toString() + " nije deklarisano! " , null);
					   else
					   {
						   currentDesignator = tempSubObj;
						   if (tempSubObj.getKind() == Obj.Meth)
							   parser.report_info("Poziv metode unutrasnje klase: Pretraga na " + namePartleft + " (" + namePart.toString() + ")" + ", nadjeno " + parser.writeObj(tempSubObj), null);
						   else
							   parser.report_info("Pristup polju unutrasnje klase: Pretraga na " + namePartleft + " (" + namePart.toString() + ")" + ", nadjeno " + parser.writeObj(tempSubObj), null);
						   lastClass = namePartleft;
					   }
					   RESULT = tempSubObj;
				   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorPart",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DesignatorPart ::= LBRACKET Expr RBRACKET 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorPart",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DesignatorList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorList",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DesignatorList ::= DesignatorList DesignatorPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorList",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				   Obj obj = Tab.find(name.toString());
			   	   if (obj == Tab.noObj)
			   	   {
			   		   parser.report_error("Greska na liniji " + nameleft + ": ime" + name.toString() + " nije deklarisano! " , null);
			   	   }
			   	   else
			   	   {
			   		   currentDesignator = obj;

			   		   if (obj.getType().getKind() == 6)	//string
		   			   {
			   			   parser.report_info("String: Pretraga na " + nameleft + " (" + name.toString() + ")" + ", nadjeno " + parser.writeObj(obj), null);
		   			   }
			   		   
			   		   if (obj.getKind() == Obj.Meth)
		   			   {
			   			   parser.report_info("Poziv globalne funkcije: Pretraga na " + nameleft + " (" + name.toString() + ")" + ", nadjeno " + parser.writeObj(obj), null);
		   			   }
			   		   else if (obj.getKind() == Obj.Fld)
		   			   {
			   			   parser.report_info("Pristup polju unutrasnje klase: Pretraga na " + nameleft + " (" + name.toString() + ")" + ", nadjeno " + parser.writeObj(obj), null);
		   			   }
			   		   else if (obj.getKind() == Obj.Var)
			   		   {
			   			   if (obj.getLevel() == 0)//globalna
			   			   {
			   				   parser.report_info("Globalna promenljiva: Pretraga na " + nameleft + " (" + name.toString() + ")" + ", nadjeno " + parser.writeObj(obj), null);
			   			   }
			   			   else
			   			   {
			   				   // da li je lokalna ili form param
			   				   Collection<Obj> scopeLocals = Tab.currentScope.getOuter().getLocals().symbols();
			   				   int numLocals = Tab.currentScope.getOuter().getLocals().numSymbols();
			   				   Obj methodObj = null;
			   				   int i = 0;
			   				   for (Obj o:scopeLocals)
			   				   {
			   					   if (i == numLocals - 1) {methodObj = o; break;}
			   					   i++;
			   				   }
			   				   numLocals = methodObj.getLevel();	//broj param
			   				   scopeLocals = Tab.currentScope.getLocals().symbols();	// u opsegu metode
			   				   i = 0;
			   				   for (Obj o:scopeLocals)
			   				   {
			   					   if (o.getName().equals(name.toString()))
			   					   {
			   						   if (i < numLocals)
			   							   parser.report_info("Formalni argument funkcije: Pretraga na " + nameleft + " (" + name.toString() + ")" + ", nadjeno " + parser.writeObj(obj), null);
			   						   else
			   							   parser.report_info("Lokalna promenljiva: Pretraga na " + nameleft + " (" + name.toString() + ")" + ", nadjeno " + parser.writeObj(obj), null);
			   					   break;
			   					   }
			   					   i++;
			   				   }
			   			   }
			   		   }
			   		   else if (obj.getKind() == Obj.Con)
			   		   {
			   			parser.report_info("Konstanta: Pretraga na " + nameleft + " (" + name.toString() + ")" + ", nadjeno " + parser.writeObj(obj), null);
			   		   }
			   			   
			   	   }
			   	   	RESULT = obj;
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Designator ::= IDENT LBRACKET Expr RBRACKET NT$14 DesignatorList 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$14 ::= 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

				   Obj obj = Tab.find(name.toString());
			   	   if (obj == Tab.noObj)
			   	   {
			   		   parser.report_error("Greska na liniji " + nameleft + ": ime" + name.toString() + " nije deklarisano! " , null);
			   	   }
			   	   else
			   		   currentDesignator = obj;
			   	   lastClass = nameleft;
				   RESULT = obj;
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$14",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Designator ::= IDENT DOT IDENT NT$13 DesignatorList 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int namesubleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int namesubright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object namesub = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$13 ::= 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int namesubleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int namesubright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object namesub = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

				   Obj obj = Tab.find(name.toString());
				   Obj subobj = Tab.noObj;
				   if(obj == Tab.noObj)
				   {
					   parser.report_error("Greska na liniji " + nameleft + ": klasa " + name.toString() + " nije deklarisana! " , null);
				   }
				   else
				   {
					   if(obj.getType().getKind() != Struct.Class)
					   {
						   parser.report_error("Greska na liniji " + nameleft + ": ocekivana klasa! " , null);
					   }
					   else
					   {
						   subobj = obj.getType().getMembersTable().searchKey(namesub.toString());
						   RESULT = subobj;
						   if(subobj == null && !name.toString().equals("this"))
							   parser.report_error("Greska na liniji " + namesubleft + ": ime " + namesub.toString() + " nije deklarisano! " , null);
						   else
						   {
							   // pristup polju unutrasnje klase
							   if (name.toString().equals("this"))
							   {
								   Obj prekoThis = Tab.currentScope.getOuter().findSymbol(namesub.toString());
								   if (prekoThis == null)
									   parser.report_error("Greska na liniji " + namesubleft + ": ime" + namesub.toString() + " nije deklarisano! " , null);
								   else
								   {
									   currentDesignator = prekoThis;
									   if (prekoThis.getKind() == Obj.Meth)
										  parser.report_info("Poziv metode unutrasnje klase: Pretraga na " + namesubleft + " (" + namesub.toString() + ")" + ", nadjeno " + parser.writeObj(prekoThis), null);
									   else
									   parser.report_info("Pristup polju unutrasnje klase: Pretraga na " + namesubleft + " (" + namesub.toString() + ")" + ", nadjeno " + parser.writeObj(prekoThis), null);
								   }
								   RESULT = prekoThis;
							   }
							   else
							   {
								   currentDesignator = subobj;
								   if (subobj.getKind() == Obj.Meth)
									   parser.report_info("Poziv metode unutrasnje klase: Pretraga na " + namesubleft + " (" + namesub.toString() + ")" + ", nadjeno " + parser.writeObj(subobj), null);
								   else
									   parser.report_info("Pristup polju unutrasnje klase: Pretraga na " + namesubleft + " (" + namesub.toString() + ")" + ", nadjeno " + parser.writeObj(subobj), null);
							   }
							   lastClass = namesubleft;
						   }
					   }
				   }  
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$13",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Factor ::= LPAREN Expr RPAREN 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			   RESULT = name;
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Factor ::= NEW Type LBRACKET Expr RBRACKET 
            {
              Object RESULT =null;
		int someTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int someTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct someType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
			   Obj obj = currentDesignator;
			   if (Struct.Class == someType.getKind())	// da li je klasa
			   {
				   parser.report_info("Pravljenje objekta unutrasnje klase: Pretraga na " + someTypeleft + "(" + obj.getName() + ")" + ", nadjeno " + parser.writeObj(obj), null);
			   }
			   RESULT = new Struct(Struct.Array, currentType);
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Factor ::= NEW Type 
            {
              Object RESULT =null;
		int someTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int someTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct someType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			   Obj obj = currentDesignator;
			   if (Struct.Class == someType.getKind())	// da li je klasa
			   {
				   parser.report_info("Pravljenje objekta unutrasnje klase: Pretraga na " + someTypeleft + "(" + obj.getName() + ")" + ", nadjeno " + parser.writeObj(obj), null);
			   }
			   RESULT = currentType;
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Factor ::= STRCONST 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			   RESULT = new Struct(6);
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Factor ::= Val 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj name = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			   RESULT = name.getType();
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Factor ::= Designator LPAREN ActPars RPAREN 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int numActParsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int numActParsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object numActPars = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
			   if (parser.mainMethod) parser.main_method_calls++;
		  	   if (func.getName().equals("chr") && (!currentDesignator.getType().equals(Tab.intType) || (int)numActPars > 1))
		  		  parser.report_error("[Greska]Linija: " + funcleft + "\tFunkcija chr pri pozivu ima 1 parametar tipa int!", null);  
		  	   else if (func.getName().equals("ord") && (!currentDesignator.getType().equals(Tab.charType) || (int)numActPars > 1))
		  		  parser.report_error("[Greska]Linija: " + funcleft + "\tFunkcija ord pri pozivu ima 1 parametar tipa char!", null);  
		  	   else if (func.getName().equals("len") && ((currentDesignator.getType().getKind() != 6 && currentDesignator.getType().getKind() != Struct.Array)  || (int)numActPars > 1))
		  		  parser.report_error("[Greska]Linija: " + funcleft + "\tFunkcija len pri pozivu ima 1 parametar tipa string ili array!", null);  
		  	   RESULT = func.getType();
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Factor ::= Designator LPAREN RPAREN 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
			   if (parser.mainMethod) parser.main_method_calls++;
			   if (func.getName().equals("chr"))
				   parser.report_error("[Greska]Linija: " + funcleft + "\tMora postojati 1 parametar metode chr tipa int!", null);  
			   else if (func.getName().equals("ord"))
				   parser.report_error("[Greska]Linija: " + funcleft + "\tParametri pri pozivu metode ord mora biti tipa char!", null);  
			   else if (func.getName().equals("len"))
				   parser.report_error("[Greska]Linija: " + funcleft + "\tParametri pri pozivu metode len moraju biti tipa string ili array!", null); 	
			   RESULT = func.getType();
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Factor ::= Designator 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj name = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			   RESULT = name.getType();
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FactorList ::= Factor 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				   RESULT = name;
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactorList",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FactorList ::= FactorList Mulop Factor 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				   RESULT = name;
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactorList",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Term ::= FactorList 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			 RESULT = name;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ExprPart ::= Term 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				 RESULT = name;
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprPart",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ExprPart ::= ExprPart Addop Term 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				 RESULT = name;
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprPart",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= ExprPart 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			 RESULT = name;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= MINUS ExprPart 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			 RESULT = name;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CondTerm ::= CondTerm AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CondTermFixed ::= CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermFixed",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Condition ::= CondTermFixed 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Condition ::= Condition OR CondTermFixed 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ConditionFixed ::= Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionFixed",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ActPars ::= Expr 
            {
              Object RESULT =null;
		
				RESULT = 1;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ActPars ::= Expr COMMA ActPars 
            {
              Object RESULT =null;
		int numActParsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numActParsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object numActPars = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = (int)numActPars + 1;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Assignment ::= Designator EQUALS Expr SEMI_COMMA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					if (d.getKind() != Obj.Var && d.getKind() != Obj.Elem && d.getKind() != Obj.Fld)
					{
						parser.report_error("[Greska]Linija: " + dleft + "\t" + d.getName() + " nije promenljiva, element niza ili polje unutar objekta!", null);
					}
					if (!((Struct)name).assignableTo(d.getType()))
					{
						parser.report_error("[Greska]Linija: " + nameleft + "\tTip nije kompatibilan pri dodeli sa " + d.getName() + "!", null);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignment",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // StatementMatched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
		 
						  parser.statement_cnt++; 
					  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // StatementMatched ::= PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI_COMMA 
            {
              Object RESULT =null;
		 
						  if (parser.mainMethod) parser.main_method_calls++; 
					  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // StatementMatched ::= PRINT LPAREN Expr RPAREN SEMI_COMMA 
            {
              Object RESULT =null;
		int exprNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int exprNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object exprName = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
						  if (parser.mainMethod) parser.main_method_calls++;
					  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // StatementMatched ::= READ LPAREN Designator RPAREN SEMI_COMMA 
            {
              Object RESULT =null;
		 
						  if (parser.mainMethod) parser.main_method_calls++; 
					  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // StatementMatched ::= RETURN Expr SEMI_COMMA 
            {
              Object RESULT =null;
		int dummyleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dummyright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object dummy = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
			               returnExists=true;
				           if (isVoid)
				        	   parser.report_error("[Greska]Linija: " + dummyleft + "\tMetod ne sme imati return sa izrazom jer je deklarisan sa void!", null);
			          
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // StatementMatched ::= RETURN SEMI_COMMA 
            {
              Object RESULT =null;
		int dummyleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int dummyright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object dummy = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
						  returnExists=true;
			              if (!isVoid)
			            	  parser.report_error("[Greska]Linija: " + dummyleft + "\tMetod mora imati return iskaz sa izrazom jer nije deklarisan sa void!", null);
		              
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // StatementMatched ::= BREAK SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // StatementMatched ::= WHILE LPAREN ConditionFixed RPAREN StatementMatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // StatementMatched ::= IF LPAREN ConditionFixed RPAREN StatementMatched ELSE StatementMatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // StatementMatched ::= Designator DEC SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // StatementMatched ::= Designator INC SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // StatementMatched ::= Designator LPAREN RPAREN SEMI_COMMA 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 
						  if (parser.mainMethod) parser.main_method_calls++;
					  	  if (func.getName().equals("chr"))
					  		  parser.report_error("[Greska]Linija: " + funcleft + "\tMora postojati 1 parametar metode chr tipa int!", null);  
					  	  else if (func.getName().equals("ord"))
					  		  parser.report_error("[Greska]Linija: " + funcleft + "\tParametri pri pozivu metode ord mora biti tipa char!", null);  
					  	  else if (func.getName().equals("len"))
					  		  parser.report_error("[Greska]Linija: " + funcleft + "\tParametri pri pozivu metode len moraju biti tipa string ili array!", null); 					  	  
					  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // StatementMatched ::= Designator LPAREN ActPars RPAREN SEMI_COMMA 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int numActParsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int numActParsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object numActPars = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
						  if (parser.mainMethod) parser.main_method_calls++;
					  	  if (func.getName().equals("chr") && (!currentDesignator.getType().equals(Tab.intType) || (int)numActPars > 1))
					  		  parser.report_error("[Greska]Linija: " + funcleft + "\tFunkcija chr pri pozivu ima 1 parametar tipa int!", null);  
					  	  else if (func.getName().equals("ord") && (!currentDesignator.getType().equals(Tab.charType) || (int)numActPars > 1))
					  		  parser.report_error("[Greska]Linija: " + funcleft + "\tFunkcija ord pri pozivu ima 1 parametar tipa char!", null);  
					  	  else if (func.getName().equals("len") && ((currentDesignator.getType().getKind() != 6 && currentDesignator.getType().getKind() != Struct.Array ) || (int)numActPars > 1))
					  		  parser.report_error("[Greska]Linija: " + funcleft + "\tFunkcija len pri pozivu ima 1 parametar tipa string ili array!", null);  
					  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // StatementMatched ::= Assignment 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // StatementUnmatched ::= WHILE LPAREN ConditionFixed RPAREN StatementUnmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // StatementUnmatched ::= IF LPAREN ConditionFixed RPAREN StatementMatched ELSE StatementUnmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // StatementUnmatched ::= IF LPAREN ConditionFixed RPAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Statement ::= StatementMatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Statement ::= StatementUnmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object typeName = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			 Obj typeNode = Tab.find(typeName.toString());
			 if (typeNode == Tab.noObj)
			 {
				 //ime ne postoji u tabeli simbola, treba prijaviti semanticku gresku
				 parser.report_error("[Greska]Linija: " + typeNameleft + "\tNije pronadjen tip " + typeName + " u tabeli simbola!", null);
				 currentType = Tab.noType;
			 }
			 else
			 {
				 if (Obj.Type == typeNode.getKind())
				 {
					 currentType = typeNode.getType();
					 RESULT = currentType;
					 
				 }
				 else
				 {
					 // ne predstavlja tip, nego nesto drugo; greska
					 parser.report_error("[Greska]Linija: " + typeNameleft + "\tIme " + typeName + " ne predstavlja tip ", null);
					 currentType = Tab.noType;
				 }
			 }
			 
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FormPar ::= Type IDENT LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int formVarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int formVarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object formVarName = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
				parser.formal_param_cnt++;
				if (parser.wrongReturnTypeOverride == false)
				{
					if (parser.mainMethod)
						   parser.report_error("[Greska]Linija: " + formVarNameleft + "\t" + formVarName.toString() + " ne sme da bude parametar main metode jer main nema parametre!", null);
					else if (Tab.currentScope.findSymbol(formVarName.toString()) != null)
				   		parser.report_error("[Greska]Linija: " + formVarNameleft + "\t" + formVarName + " je vec deklarisano", null);
					else 
						Tab.insert(Obj.Var, formVarName.toString(), new Struct(Struct.Array, currentType));
				}
				if (overridenMethod != null && parser.mismatched == true)
				{
					int i = 0;
					for(Obj o:overridenMethod.getLocalSymbols())
					{
						if ((i == Tab.currentScope.getnVars() - 1) && (o.getType().getKind() == Struct.Array) && (o.getType().getElemType().getKind() == currentType.getKind())) break;
						i++;
					}
					if (i == overridenMethod.getLocalSymbols().size())
						parser.mismatched = true;
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPar",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FormPar ::= Type IDENT 
            {
              Object RESULT =null;
		int methTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int methTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct methType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int formVarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int formVarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object formVarName = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				parser.formal_param_cnt++;
				if (parser.wrongReturnTypeOverride == false)
				{
					if (parser.mainMethod)
						   parser.report_error("[Greska]Linija: " + formVarNameleft + "\t" + formVarName.toString() + " ne sme da bude parametar main metode jer main nema parametre!", null);
					else if (Tab.currentScope.findSymbol(formVarName.toString()) != null)
				   		   parser.report_error("[Greska]Linija: " + formVarNameleft + "\t" + formVarName + " je vec deklarisano", null);
					else 
						Tab.insert(Obj.Var, formVarName.toString(), currentType);
				}
				if (overridenMethod != null && parser.mismatched == true)
				{
					int i = 0;
					for(Obj o:overridenMethod.getLocalSymbols())
					{
						if ((i == Tab.currentScope.getnVars() - 1) && (o.getType().getKind() == currentType.getKind())) break;
						i++;
					}
					if (i == overridenMethod.getLocalSymbols().size())
						parser.mismatched = true;
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPar",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FormPars ::= FormPar 
            {
              Object RESULT =null;
		 
				 RESULT = 1; 
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FormPars ::= FormPars COMMA FormPar 
            {
              Object RESULT =null;
		int numForParsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int numForParsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object numForPars = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
				 RESULT = (int)numForPars + 1; 
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MethodPars ::= 
            {
              Object RESULT =null;
		 
				   RESULT = 0; 
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MethodPars ::= FormPars 
            {
              Object RESULT =null;
		int numForParsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numForParsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object numForPars = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				  RESULT = numForPars; 
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MethodName ::= IDENT 
            {
              Obj RESULT =null;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object methName = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				   if (methName.equals("main")) 
				   {
					   if (!currentType.equals(Tab.noType))
						   parser.report_error("[Greska]Linija: " + methNameleft + "\t" + methName.toString() + " mora da bude void metoda!", null);
					   parser.mainMethod = true;
				   }
			  	   
				   // da li je takva metoda sa tim imenom vec deklarisana i nije u pitanju nasledjena metoda
				   if (Tab.currentScope.findSymbol(methName.toString()) != null && baseClass == null)
					   parser.report_error("[Greska]Linija: " + methNameleft + "\t" + methName.toString() + " je vec deklarisano", null);
				   else
				   {
					   if (baseClass == null)
					   {
						   currentMethod = Tab.insert(Obj.Meth, methName.toString(), currentType);
					   }
					   else
					   {
						   // mora da proveri da li postoji samo 1 pojava u current scope; tj da li vec nije doslo do override
						   Obj baseClassMethod = null;
						   for (Obj o:baseClass.getType().getMembers())
						   {
							   if (o.getName().equals(methName.toString()))
							   {
								   baseClassMethod = o;
								   break;
							   }
						   }
						   
						   if (baseClassMethod == null)	// nema tu metodu
						   {
							   currentMethod = Tab.insert(Obj.Meth, methName.toString(), currentType);
						   }
						   else
						   {
							   // da li je ista povratna vrednost
							   if (((baseClassMethod.getType().getKind() == Struct.Array) && (baseClassMethod.getType().getElemType().getKind() == currentType.getElemType().getKind())) || (baseClassMethod.getType().getKind() == currentType.getKind()))
							   {
								   int brojPojava = 0;
								   for (Obj o: Tab.currentScope.getLocals().symbols())
								   {
									   if (o.getName().equals(methName.toString()))
										   brojPojava++;
								   }
								   if (brojPojava == 1)
								   {
									   // vec je ubacena, samo treba da se azuriraju parametri
									   overridenMethod = baseClassMethod;
									   HashTableDataStructure ht = new HashTableDataStructure();
							   		   for (Obj o:baseClassMethod.getLocalSymbols())
							   		   {
							   			   ht.insertKey(o);
							   		   }
							   		   overridenMethod.setLocals(ht);
									   currentMethod = Tab.insert(Obj.Meth, "this." + methName.toString(), currentType);
								   }
								   else
								   {
									   parser.wrongReturnTypeOverride = true;
									   parser.report_error("[Greska]Linija: " + methNameleft + "\t" + methName.toString() + " je vec deklarisano", null);
								   }
							   }
							   else
							   {
								   parser.wrongReturnTypeOverride = true;
								   parser.report_error("[Greska]Linija: " + methNameleft + "\t" + methName.toString() + " se razlikuje od metode natklase po povratnom tipu!", null);
							   }
						   }
					   }
				   }
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodName",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MethodDeclPart ::= MethodName OpenScope NT$10 LPAREN MethodPars NT$11 RPAREN LocalVarDeclList LBRACE StatementList RBRACE NT$12 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).right;
		Obj methName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).value;
		int numForParsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int numForParsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Object numForPars = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclPart",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Obj methName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;
		int numForParsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int numForParsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Object numForPars = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;

					   if (!isVoid && !returnExists) 
					   { 
			             parser.report_error("[Greska]Linija: " + methNameleft + "\tMetod mora imati return iskaz jer nije deklarisan sa void!", null);
			           }
                       returnExists=false;

					   if (!parser.wrongReturnTypeOverride)
					   {
						   Tab.chainLocalSymbols(currentMethod);
					   		if (overridenMethod != null)
					   		{
					   			if(parser.mismatched == true)
						   		{
						   			Tab.currentScope.getLocals().deleteKey(currentMethod.getName());
						   			parser.report_error("[Greska]Linija: " + methNameleft + "\t" + overridenMethod.getName() + " ne odgovara potpisu natklase!", null);
						   			Tab.currentScope.getOuter().getLocals().deleteKey(currentMethod.getName());
						   			parser.mismatched = false;
						   		}
						   		else
						   		{
						   			Obj baseNode = Tab.currentScope.getOuter().findSymbol(overridenMethod.getName());
						   			baseNode.setAdr(currentMethod.getAdr());
						   			HashTableDataStructure ht = new HashTableDataStructure();
						   			for (Obj o:currentMethod.getLocalSymbols())
						   			{
						   				ht.insertKey(o);
						   			}
						   			baseNode.setLocals(ht);
						   			Tab.currentScope.getOuter().getLocals().deleteKey(currentMethod.getName());
						   		}
					   		}  
					   }
			   	   	   parser.mainMethod = false;
			   		   parser.wrongReturnTypeOverride = false;
			   		   overridenMethod = null;
			   		   currentMethod = null;
				   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$12",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj methName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int numForParsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numForParsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object numForPars = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

					   	// level = broj formalnih parametara
					   if (!parser.wrongReturnTypeOverride && !parser.mainMethod)
					   {
						   	currentMethod.setLevel(currentMethod.getLevel() + (int)numForPars);
						    if (overridenMethod != null)
						    {
						    	if (overridenMethod.getLevel() != currentMethod.getLevel())
						    		parser.mismatched = true;	// ne moze da bude redefinisana metoda
						    }  
					   }
				   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$11",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$10 ::= 
            {
              Object RESULT =null;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj methName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

					   if (!parser.wrongReturnTypeOverride)
					   {
						   if (parser.inner)
						   {
							   parser.inner_class_meth_cnt++;
							   Tab.insert(Obj.Var, "this", currentClass.getType());
							   currentMethod.setLevel(1);	// jer ima this implicitni
						   }
						   else
							   parser.function_cnt++; 
					   }
				   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$10",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MethodDecl ::= VOID NT$9 MethodDeclPart 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
		    	   isVoid = false; 
		       
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$9 ::= 
            {
              Object RESULT =null;
 
				   isVoid = true; currentType = Tab.noType; 
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$9",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodDecl ::= Type MethodDeclPart 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				   isVoid = (t.equals(Tab.noType));
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LocalMethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalMethodDeclList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LocalMethodDeclList ::= LocalMethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalMethodDeclList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ClassDeclMethodDeclaration ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDeclMethodDeclaration",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ClassDeclMethodDeclaration ::= LBRACE LocalMethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDeclMethodDeclaration",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LocalVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LocalVarDeclList ::= LocalVarDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassBase ::= IDENT 
            {
              String RESULT =null;
		int baseNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int baseNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object baseName = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				  RESULT = baseName.toString();
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBase",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassName ::= IDENT 
            {
              Obj RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object className = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				  if (Tab.currentScope.findSymbol(className.toString()) == null)
				  {
					  parser.inner_class_cnt++;
					  currentClass = Tab.insert(Obj.Type, className.toString(), new Struct(Struct.Class));
				  }
				  else
					  parser.report_error("[Greska]Linija: " + classNameleft + "\t" + className + " je vec deklarisano", null);
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassName",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassDecl ::= CLASS ClassName EXTENDS ClassBase OpenScope NT$5 LBRACE NT$6 LocalVarDeclList NT$7 ClassDeclMethodDeclaration RBRACE NT$8 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).right;
		Obj className = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).value;
		int baseClassNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int baseClassNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		String baseClassName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-13)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Obj className = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;
		int baseClassNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int baseClassNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		String baseClassName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;

				  parser.inner = false;
				  parser.isGlobal = true;
				  baseClass = null;
				  
				  Tab.chainLocalSymbols(currentClass.getType());
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Obj className = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int baseClassNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int baseClassNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String baseClassName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;

				  parser.local = true;
			  
				  // "kopira" metode natklase
				  for (Obj o: baseClass.getType().getMembers())
				  {
					  if (o.getKind() == Obj.Meth)
					  {
						  Obj attr = Tab.insert(o.getKind(), o.getName(), o.getType());
						  attr.setAdr(o.getAdr());
						  attr.setLevel(o.getLevel());
						  SymbolDataStructure locals = new HashTableDataStructure();
						  for (Obj member:o.getLocalSymbols())
						  {
							  if (member.getName().equals("this"))
								  locals.insertKey(new Obj(Obj.Var, "this", currentClass.getType()));
							  else
								  locals.insertKey(member);
						  }
						  attr.setLocals(locals);
						  attr.setFpPos(o.getFpPos());
					  }
				  }
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj className = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int baseClassNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int baseClassNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String baseClassName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
 
				  parser.inner = true;
				  parser.isGlobal = false; 
				  parser.local = false;
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$5 ::= 
            {
              Object RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj className = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int baseClassNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int baseClassNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String baseClassName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

				  baseClass = Tab.find(baseClassName.toString());
				  if (baseClass == Tab.noObj)
				  {
					  parser.report_error("[Greska]Linija: " + baseClassNameleft + "\tKlasa " + baseClassName + " nije deklarisana!", null);
				  }
				  else if (baseClass.getType().getKind() != Struct.Class)
				  {
					  parser.report_error("[Greska]Linija: " + baseClassNameleft + "\tOcekivana natklasa!", null);
				  }
					  
					  
				  // "kopira" polja natklase
				  for (Obj o: baseClass.getType().getMembers())
				  {
					  if (o.getKind() == Obj.Meth) break;
					  Obj attr = Tab.insert(o.getKind(), o.getName(), o.getType());
					  attr.setAdr(o.getAdr());
				  }
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassDecl ::= CLASS ClassName OpenScope LBRACE NT$2 LocalVarDeclList NT$3 ClassDeclMethodDeclaration RBRACE NT$4 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Obj className = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Obj className = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;

				  parser.inner = false;
				  parser.isGlobal = true;
				  
				  Tab.chainLocalSymbols(currentClass.getType());
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj className = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

				  parser.local = true;
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$2 ::= 
            {
              Object RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj className = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
 
				  parser.inner = true;
				  parser.isGlobal = false; 
				  parser.local = false;
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VarDeclPart ::= IDENT LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object varName = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
					// Brojanje lokalnih promenljivih main funkcije i globalnih nizova
					if (parser.mainMethod) parser.main_var_count++;
					else if (parser.isGlobal) parser.array_count++;
					else if (parser.inner && !parser.local) parser.inner_class_field_cnt++;
					
					Struct s = new Struct(Struct.Array);
					s.setElementType(currentType);
					// da li je ime vec deklarisano u ovom scope-u
					if (Tab.currentScope.findSymbol(varName.toString()) == null)
						RESULT = Tab.insert(parser.inner && !parser.local? Obj.Fld: Obj.Var, varName.toString(), s);
					else
						parser.report_error("[Greska]Linija: " + varNameleft + "\t" + varName + " je vec deklarisano", null);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclPart",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VarDeclPart ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object varName = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					// Brojanje lokalnih promenljivih main funkcije i globalnih promenljivih
					if (parser.mainMethod) parser.main_var_count++;
					else if (parser.isGlobal) parser.var_count++;
					else if (parser.inner && !parser.local) parser.inner_class_field_cnt++;
					
					// da li je ime vec deklarisano u ovom scope-u
					if (Tab.currentScope.findSymbol(varName.toString()) == null)
						RESULT = Tab.insert(parser.inner && !parser.local? Obj.Fld: Obj.Var, varName.toString(), currentType);
					else
						parser.report_error("[Greska]Linija: " + varNameleft + "\t" + varName + " je vec deklarisano", null);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclPart",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarDeclList ::= VarDeclPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarDeclList ::= VarDeclList COMMA VarDeclPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarDecl ::= Type VarDeclList SEMI_COMMA 
            {
              Object RESULT =null;
		int currentTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int currentTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct currentType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Val ::= CHARCONST 
            {
              Obj RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			RESULT = new Obj(Obj.Con, "", Tab.charType);  
			((Obj) RESULT).setAdr((char)val);
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Val",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Val ::= NUMBER 
            {
              Obj RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			RESULT = new Obj(Obj.Con, "", Tab.intType);  
			((Obj) RESULT).setAdr((int)val); 
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Val",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ConstDeclIdent ::= IDENT EQUALS STRCONST 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object constName = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int constValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object constValue = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					   if (parser.isGlobal) parser.const_count++;
					   if (Tab.currentScope.findSymbol(constName.toString()) != null)
				   		   parser.report_error("[Greska]Linija: " + constNameleft + "\t" + constName + " je vec deklarisano", null);
				   	   else
				   	   {
				   		   Obj cons = Tab.insert(Obj.Con, constName.toString(), stringType);
				   		   cons.setAdr(parser.stringKonstante.size());
				   		   parser.stringKonstante.add(constValue.toString());
				   		   if (currentType.getKind() != 6)
				   			parser.report_error("[Greska]Linija: " + constValueleft + "\tSemanticka greska u tipu!", null);
				   	   }
				   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclIdent",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ConstDeclIdent ::= IDENT EQUALS BOOLCONST 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object constName = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int constValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object constValue = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					   if (parser.isGlobal) parser.const_count++;
					   if (Tab.currentScope.findSymbol(constName.toString()) != null)
				   		   parser.report_error("[Greska]Linija: " + constNameleft + "\t" + constName + " je vec deklarisano", null);
				   	   else
				   	   {
				   		   Obj cons = Tab.insert(Obj.Con, constName.toString(), boolType);
				   		   cons.setAdr((boolean)constValue? 1:0);						// adr = value
				   		   if (currentType.getKind() != Struct.Bool)
				   			parser.report_error("[Greska]Linija: " + constValueleft + "\tSemanticka greska u tipu!", null);
				   	   }
				   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclIdent",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ConstDeclIdent ::= IDENT EQUALS Val 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object constName = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int constValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj constValue = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					   if (parser.isGlobal) parser.const_count++;
				   	   if (Tab.currentScope.findSymbol(constName.toString()) != null)
				   		   parser.report_error("[Greska]Linija: " + constNameleft + "\t" + constName + " je vec deklarisano", null);
				   	   else
				   	   {
				   		   Obj cons = Tab.insert(Obj.Con, constName.toString(), currentType);
				   		   cons.setAdr(((Obj) constValue).getAdr());						// adr = value
				   		   if(((Obj) constValue).getType() != currentType)
				   		   {
				   			   parser.report_error("[Greska]Linija: " + constValueleft + "\tSemanticka greska u tipu!", null);
				   		   }
				   	   }	   
				   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclIdent",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstDeclIdentList ::= ConstDeclIdent 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclIdentList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstDeclIdentList ::= ConstDeclIdentList COMMA ConstDeclIdent 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclIdentList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstDecl ::= CONST Type ConstDeclIdentList SEMI_COMMA 
            {
              Object RESULT =null;
		int currentTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int currentTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct currentType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MethodDeclarationList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclarationList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MethodDeclarationList ::= MethodDeclarationList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclarationList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DeclarationPart ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationPart",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DeclarationPart ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationPart",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DeclarationPart ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationPart",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclarationList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclarationList ::= DeclarationList DeclarationPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProgramName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object pName = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					RESULT = Tab.insert(Obj.Prog, pName.toString(), Tab.noType);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramName",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= PROGRAM ProgramName OpenScope DeclarationList LBRACE NT$0 MethodDeclarationList RBRACE NT$1 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;

				Tab.chainLocalSymbols(p);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

				parser.isGlobal = false;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CloseScope ::= 
            {
              Object RESULT =null;
		 Tab.closeScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CloseScope",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // OpenScope ::= 
            {
              Object RESULT =null;
		 Tab.openScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpenScope",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

